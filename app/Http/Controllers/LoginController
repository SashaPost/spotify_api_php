<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

use App\Http\Controllers\SpotifyController;



class LoginController extends SpotifyController
{
    /**
     * Handle an authentication attempt.
     * 
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     * @return \Illuminate\Http\RedirectResponse
     */
    public function authenticate(Request $request)
    {
        $credentials = $request->validate(
            [
            'email' => ['required', 'email'],
            'password' => ['required'],
            ]
        );

        // The values in the array will be used to find the user in your database table.
        // The user will be retrieved by the value of the email column.
        // If the user is found, the hashed password stored in the database will be compared 
        // with the password value passed to the method via the array.
        // ou should not hash the incoming request's password value.
        // if (Auth::attempt($credentials))    
        // {   
        //     // 
        //     $request->session()->regenerate();

        //     return redirect()->intended('dashboard');   // 'dashboard' was taken from the docs example
        // }
        
        // For complex query conditions, you may provide a closure in your array of credentials. 
        // This closure will be invoked with the query instance, 
        // allowing you to customize the query based on your application's needs.
        if (Auth::attempt([
            'email' => $credentials['email'],
            'password' => $credentials['password'],
            fn ($query) => $query->has('activeSubscription'),   //'fn()' is a valid shortcut for 'function()' when defining a closure
        ])) {
            // Authentication was successful...
        }

        // The attemptWhen method, which receives a closure as its second argument, 
        // may be used to perform more extensive inspection of the potential user before actually authenticating the user. 
        // The closure receives the potential user and should return true or false to indicate if the user may be authenticated.
        // if (Auth::attemptWhen([
        //     'email' => $email,
        //     'password' => $password,
        // ], function ($user) {
        //     return $user->isNotBanned();
        // })) {
        //     // Authentication was successful...
        // }

        // $dontKnow = Auth::attempt($credentials);    // don't know what i tried to do 

        return back()->withErrors([
            'email' => 'The provided credentials do not match our records.',
        ])->onlyInput('email');
    }
}